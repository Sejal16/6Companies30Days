https://leetcode.com/problems/rotting-oranges/

class Solution {
    int dir[][]={{0,1},{1,0},{-1,0},{0,-1}};
    public int orangesRotting(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        Queue<int[]> q=new LinkedList<>();
         boolean visit[][]=new boolean[n][m];
        int rott=0,good=0;
        for(int i=0;i<grid.length;i++)
        {
            for(int j=0;j<grid[i].length;j++){
            if(grid[i][j]==2)
            {
                q.offer(new int[]{i,j,0});
                rott++;
                visit[i][j]=false;
            }
            else if(grid[i][j]==1){
                   visit[i][j]=true;
                good++;
            }
                
        }}
          if(good==0 )
            return 0;
        if(rott==0)
            return -1;
      
       
        int time=0;
        while(!q.isEmpty())
        {
             int temp[]=q.poll();
            int i=temp[0];
            int j=temp[1];
            time=temp[2];
            for(int k=0;k<4;k++)
            {
               int x=i+dir[k][0];
                int y=j+dir[k][1];
                if(x>=0 && x<n && y>=0 && y<m)
                {
                    if(grid[x][y]==1 && visit[x][y])
                    { visit[x][y]=false;
                            good--;
                        q.offer(new int[]{x,y,time+1});
                    }
            }
        }
        }
        System.out.println(good);
            return good==0?time:-1;
    }
}