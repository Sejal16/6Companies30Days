https://leetcode.com/problems/as-far-from-land-as-possible/

class Solution {
   int dir[][]={{0,1},{0,-1},{1,0},{-1,0}};
    public int maxDistance(int[][] grid) {
        
        //We need to find distance from water to land
        int n=grid.length;
        int m=grid[0].length;
        Queue<int[]> q=new LinkedList<>();
        int zero=0,one=0;
     boolean visited[][]=new boolean [n][m]; 
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==1)
                {
                     visited[i][j]=true;
                    q.add(new int[]{i,j,0});
                    one++;
                }
                else
                    zero++;
             
            }
        }
        if(zero==0 || one==0)
            return -1;
        int res=0;
     while(!q.isEmpty())
        {
        int temp[]=q.poll();
        int i=temp[0];
        int j=temp[1];
         int dist=temp[2];
          res=Math.max(res,dist);
        for(int k=0;k<4;k++)
        {
             int x=i+dir[k][0];
            int y=j+dir[k][1];
           
            if(x>=n || x<0  ||  y>=m  || y<0 ) continue;
            
               if(!visited[x][y])
                {    
                  int currDis=dist+Math.abs(i-x)+  Math.abs(j-y);
                  q.add(new int[]{x,y,currDis});
                  visited[x][y]=true;
                    
                }
        }
        
    }   
         return res;
    }
}