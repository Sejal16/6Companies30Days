https://leetcode.com/problems/course-schedule-ii/

class Solution {
    public int[] findOrder(int n, int[][] pre) {
       
           List<List<Integer>> adj=new ArrayList<>();
        for(int i=0;i<n;i++)
            adj.add(new ArrayList<Integer>());
        int inorder[]=new int [n];
       for(int i=0;i<pre.length;i++)
       {
               adj.get(pre[i][1]).add(pre[i][0]); 
           inorder[pre[i][0]]++;
       }
        Queue<Integer> q=new LinkedList<>();
       
        for(int i=0;i<n;i++)
            if(inorder[i]==0)
                q.offer(i);
                int res[]=new int[n];
        int k=0,c=0;
        while(!q.isEmpty())
        {
            int u=q.poll();
                res[k++]=u;
            for(int v:adj.get(u))
            {
                inorder[v]--;
                if(inorder[v]==0)
                    q.offer(v);
            }
        }
      return  k==n?res:new int[]{};
    }
}