https://leetcode.com/problems/minimum-swaps-to-arrange-a-binary-grid/

class Solution {
    
    int[] gridtoFre(int grid[][])
    {
        int arr[]=new int[grid.length];
        int k=0;
        for(int x[]:grid)
        {
           arr[k++]= count(x);
        }
        return arr;
    }
    int count(int x[])
    {
        int i=x.length-1,c=0;
        while(i>=0 && x[i]==0)
        {
           c++;
            i--;
        } 
        return c;
    }
   int solve(int arr[])
    {
        int res=0;
        int n=arr.length;
        for(int i=0;i<n;i++)
        {
            if(arr[i]<n-i-1){
            int j=i;
            while(j<n && arr[j]<n-i-1)
            {
                j++;
            }
            if(j==n)
                return -1;
            else{
               res+= swap(arr,i,j);
                      // System.out.println(res);
            }
            }
        }
        return res;
    }
   int swap(int arr[],int i,int j)
    {
       int c=0;
        while(j>i)
        {
            int temp=arr[j];
            arr[j]=arr[j-1];
            arr[j-1]=temp;
            c++;
            j--;
        }
   return c; 
   }
    public int minSwaps(int[][] grid) {
        int arr[]=gridtoFre(grid);
       return solve(arr);
    }
}