https://practice.geeksforgeeks.org/problems/minimum-sum-partition3317/1/#

class Solution
{

	public int minDifference(int arr[], int n) 
	{ 
	    // Your code goes here
	    ArrayList<Integer> al=new ArrayList<>();
	    int range=0,min=Integer.MAX_VALUE;
	    for(int i=0;i<arr.length;i++) range+=arr[i];
	    al = subsetSum(arr,range);
	    for(int i=0;i<al.size();i++) min=Math.min(min,range-2*(al.get(i)));
	    return min;
	} 
	public ArrayList<Integer> subsetSum(int[] arr,int range){
	    ArrayList<Integer> al=new ArrayList<>();
	    int n=arr.length;
	    boolean[][] dp = new boolean[n+1][range+1];
	    for(int i=0;i<range+1;i++) dp[0][i]=false;
	    for(int i=0;i<n+1;i++) dp[i][0]=true;
	    
	    for(int i=1;i<n+1;i++){
	        for(int j=1;j<range+1;j++){
	            if(arr[i-1]<=j) dp[i][j]=dp[i-1][j-arr[i-1]] || dp[i-1][j];
	            else dp[i][j]=dp[i-1][j];
	        }
	    }
	    for(int i=n;i<n+1;i++){
	        for(int j=0;j<=range/2;j++){
	            if(dp[i][j]==true) al.add(j);
	        }
	    }
	    return al;
	}
}