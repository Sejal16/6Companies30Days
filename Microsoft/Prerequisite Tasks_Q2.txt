https://practice.geeksforgeeks.org/problems/prerequisite-tasks/1/#

class Solution {
    public boolean isPossible(int n, int[][] pre)
    {
       List<List<Integer>> adj=new ArrayList<>();
       for(int i=0;i<n;i++)
       {
         adj.add(new ArrayList<>());
         
       }
        int in[]=new int[n];
       for(int x[]:pre)
       {
           adj.get(x[0]).add(x[1]);
           in[x[1]]++;
       }
       Queue<Integer> q=new LinkedList<>();
      for(int i=0;i<n;i++)
      {
          if(in[i]==0)
          {
              q.offer(i);
          }
      }
      if(q.isEmpty())
      return false;
      int c=0;
      while(!q.isEmpty())
      {
          int u=q.poll();
          c++;
          for(int x:adj.get(u))
          {
              in[x]--;
              if(in[x]==0)
              q.offer(x);
          }
      }
     return  c==n?true:false;
         }
    
}