https://leetcode.com/problems/path-with-maximum-probability/

class node{
    int vertex;
    double prob;
    node(int ver,double p)
    {
        vertex=ver;
        prob=p;
    }
}

class Solution {
    public double maxProbability(int n, int[][] edges, double[] succProb, int start, int end) {
        
        List<List<node>> adj=new ArrayList<>();
        for(int i=0;i<n;i++)
        {
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<edges.length;i++)
        {
            adj.get(edges[i][0]).add(new node(edges[i][1],succProb[i]));
            adj.get(edges[i][1]).add(new node(edges[i][0],succProb[i]));
        }
       
     double[] pro = new double[n];
     PriorityQueue<node> pq=new PriorityQueue<node>((a,b)->((Double)b.prob).compareTo((Double)a.prob));
        pq.offer(new node(start,1));
       
        while(!pq.isEmpty()){
          node curr=pq.poll();
            int u=curr.vertex;
            double p=curr.prob;
            
            if(u==end)
                return p;
          for(node temp:adj.get(u))
        {
            int v=temp.vertex;
          double val=temp.prob;
             
      if(pro[v]<(val*p)){
          
          pq.offer(new node(v,val*p));
           pro[v]=val*p;
      }
        }
   
        }
       
       return 0.0; 
    
    
    }
}